generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Chat {
  id         Int          @id @default(autoincrement())
  Message    Message[]
  gameRoomId Int          @unique
  gameRoom   GameRoom     @relation(fields: [gameRoomId], references: [id], onDelete: Cascade)
  UserResult UserResult[]
  User       User[]
  UserVote   UserVote[]
}

model User {
  id             String       @id
  username       String       @unique
  hashedPassword String
  messages       Message[]
  chatId         Int?
  chat           Chat?        @relation(fields: [chatId], references: [id])
  UserResult     UserResult[]
  Session        Session[]
  GameRoom       GameRoom[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Message {
  id        String   @id @default(uuid())
  message   String
  sender    String
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [sender], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model GameRoom {
  id          Int          @id @default(autoincrement())
  roomName    String
  hostId      String
  user        User         @relation(fields: [hostId], references: [id], onDelete: Cascade)
  maxPlayers  Int
  rounds      Int
  description String?
  roundTime   Int          @default(240)
  isBegin     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  Round       Round[]
  UserResult  UserResult[]
  chat        Chat?
}

model Round {
  id         Int          @id @default(autoincrement())
  startedAt  DateTime     @default(now())
  gameRoomId Int
  game       GameRoom     @relation(fields: [gameRoomId], references: [id], onDelete: Cascade)
  UserResult UserResult[]
  UserVote   UserVote[]
}

model UserResult {
  id           Int      @id @default(autoincrement())
  userId       String
  kuamTongHarm String
  status       String   @default("alive")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId       Int
  chat         Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  gameRoomId   Int
  game         GameRoom @relation(fields: [gameRoomId], references: [id], onDelete: Cascade)
  roundId      Int
  round        Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  point        Int      @default(1)
}

model UserVote {
  voterId   String
  voteToId  String
  roundId   Int
  round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([voterId, voteToId, roundId, chatId])
}

model KaumTongHarm {
  id   Int     @id @default(autoincrement())
  word String  @unique
  type String?
}
