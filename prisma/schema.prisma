generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Chat {
  id           Int            @id @default(autoincrement())
  Message      Message[]
  UsersOnChats UsersOnChats[]
  gameId       Int            @unique
  game         Game           @relation(fields: [gameId], references: [id])
  UserResult   UserResult[]
  chatId       Int?
}

model User {
  id             String         @id
  username       String         @unique
  hashedPassword String
  messages       Message[]
  usersOnChats   UsersOnChats[]
  UserResult     UserResult[]
  Session        Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model UsersOnChats {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId Int

  @@id([userId, chatId])
}

model Message {
  id        String   @id @default(uuid())
  message   String
  sender    String
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [sender], references: [id])
  createdAt DateTime @default(now())
}

model Game {
  id          Int          @id @default(autoincrement())
  gameTitle   String
  maxPlayers  Int
  rounds      Int
  description String
  roundTime   Int          @default(240)
  isBegin     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  Round       Round[]
  UserResult  UserResult[]
  chat        Chat?
}

model Round {
  id         Int          @id @default(autoincrement())
  startedAt  DateTime     @default(now())
  gameId     Int
  game       Game         @relation(fields: [gameId], references: [id])
  UserResult UserResult[]
}

model UserResult {
  id           Int    @id @default(autoincrement())
  userId       String
  kuamTongHarm String
  user         User   @relation(fields: [userId], references: [id])
  chatId       Int
  chat         Chat   @relation(fields: [chatId], references: [id])
  gameId       Int
  game         Game   @relation(fields: [gameId], references: [id])
  roundId      Int
  round        Round  @relation(fields: [roundId], references: [id])
  point        Int    @default(0)
}
